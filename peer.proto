/*
Copyright 2018-2022 Mailgun Technologies Inc

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

option go_package = "github.com/gubernator-io/gubernator";

package gubernator.v3;

import "gubernator.proto";

message ForwardRequest {
  // Must specify at least one RateLimit. The peer that receives this request MUST be authoritative for
  // each rate_limit[x].unique_key provided, as the peer will not forward the request to any other peers
  repeated RateLimitRequest requests = 1;
}

message ForwardResponse {
  // Responses are in the same order as they appeared in the PeerRateLimitRequestuests
  repeated RateLimitResponse rate_limits = 1;
}

message UpdateRequest {
  // Must specify at least one RateLimit
  repeated UpdateRateLimit globals = 1;
}

message UpdateRateLimit {
  // Uniquely identifies this rate limit IE: 'ip:10.2.10.7' or 'account:123445'
  string key = 1;
  // The rate limit state to update
  RateLimitResponse state = 2;
  // The algorithm used to calculate the rate limit. The algorithm may change on
  // subsequent requests, when this occurs any previous rate limit hit counts are reset.
  Algorithm algorithm = 3;
  // The duration of the rate limit in milliseconds
  int64 duration = 4;
  // The exact time the original request was created in Epoch milliseconds.
  // Due to time drift between systems, it may be advantageous for a client to
  // set the exact time the request was created. It possible the system clock
  // for the client has drifted from the system clock where gubernator daemon
  // is running.
  //
  // The created time is used by gubernator to calculate the reset time for
  // both token and leaky algorithms. If it is not set by the client,
  // gubernator will set the created time when it receives the rate limit
  // request.
  int64 created_at = 5;
}